//*****************************************************************************
//  ぼくの　すうがく　かんすうぐん！
//  author: 中島将浩
//  update: 2014/07/15
//*****************************************************************************

#ifndef _MY_MATH_H_
#define _MY_MATH_H_

#include <d3dx9.h>

//*****************************************************************************
//  ただの組み合わせ
//*****************************************************************************
int Conbination(int n, int k);

//*****************************************************************************
//  バーンスタイン基底関数
//*****************************************************************************
float BernsteinBasisPolynomials(int n, int k, float t);

//*****************************************************************************
//  三次ベジェ曲線
//*****************************************************************************
void CubicBezierCurve(D3DXVECTOR3 *b, float t, D3DXVECTOR3 *out_p);

//*****************************************************************************
//  三次ベジェ曲線の長さを得る
//*****************************************************************************
float CubicBezierCurveLength(D3DXVECTOR3 *b, float t0, float t1, float threshold);

//*****************************************************************************
//  三次ベジェ曲線の長さを得る
//*****************************************************************************
float CubicBezierCurveLength(D3DXVECTOR3 *b, float t, float delta);


//*****************************************************************************
//  CubicBezierCurveLengthの逆射
//*****************************************************************************
float CubicBezierCurveLengthInverse(D3DXVECTOR3 *b, float length, float delta);

//*****************************************************************************
//  Hermite補間による曲線
//*****************************************************************************
void HermiteCurve(D3DXVECTOR3 *p0, D3DXVECTOR3 *p1, D3DXVECTOR3 *v0, D3DXVECTOR3 *v1, float t, D3DXVECTOR3 *out_p);

//*****************************************************************************
//  三角形内外判定 y値は無視します
//*****************************************************************************
bool TriangleInside(D3DXVECTOR3 p0, D3DXVECTOR3 p1, D3DXVECTOR3 p2, D3DXVECTOR3 p);

void PiSectionFix(float *dst, float *src);
void PiSectionFix(D3DXVECTOR3 *dst, D3DXVECTOR3 *src);

static D3DXVECTOR3 CalculateTriangleNormal(D3DXVECTOR3 p1, D3DXVECTOR3 p2, D3DXVECTOR3 p3);

#endif